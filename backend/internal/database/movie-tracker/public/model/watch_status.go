//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type WatchStatus string

const (
	WatchStatus_Unwatched   WatchStatus = "unwatched"
	WatchStatus_Watching    WatchStatus = "watching"
	WatchStatus_PlanToWatch WatchStatus = "plan to watch"
	WatchStatus_Watched     WatchStatus = "watched"
)

var WatchStatusAllValues = []WatchStatus{
	WatchStatus_Unwatched,
	WatchStatus_Watching,
	WatchStatus_PlanToWatch,
	WatchStatus_Watched,
}

func (e *WatchStatus) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "unwatched":
		*e = WatchStatus_Unwatched
	case "watching":
		*e = WatchStatus_Watching
	case "plan to watch":
		*e = WatchStatus_PlanToWatch
	case "watched":
		*e = WatchStatus_Watched
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for WatchStatus enum")
	}

	return nil
}

func (e WatchStatus) String() string {
	return string(e)
}

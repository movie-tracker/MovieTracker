//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Watchlist = newWatchlistTable("public", "watchlist", "")

type watchlistTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnInteger
	MovieID  postgres.ColumnInteger
	UserID   postgres.ColumnInteger
	Status   postgres.ColumnString
	Favorite postgres.ColumnBool
	Comments postgres.ColumnString
	Rating   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WatchlistTable struct {
	watchlistTable

	EXCLUDED watchlistTable
}

// AS creates new WatchlistTable with assigned alias
func (a WatchlistTable) AS(alias string) *WatchlistTable {
	return newWatchlistTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WatchlistTable with assigned schema name
func (a WatchlistTable) FromSchema(schemaName string) *WatchlistTable {
	return newWatchlistTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WatchlistTable with assigned table prefix
func (a WatchlistTable) WithPrefix(prefix string) *WatchlistTable {
	return newWatchlistTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WatchlistTable with assigned table suffix
func (a WatchlistTable) WithSuffix(suffix string) *WatchlistTable {
	return newWatchlistTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWatchlistTable(schemaName, tableName, alias string) *WatchlistTable {
	return &WatchlistTable{
		watchlistTable: newWatchlistTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newWatchlistTableImpl("", "excluded", ""),
	}
}

func newWatchlistTableImpl(schemaName, tableName, alias string) watchlistTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		MovieIDColumn  = postgres.IntegerColumn("movie_id")
		UserIDColumn   = postgres.IntegerColumn("user_id")
		StatusColumn   = postgres.StringColumn("status")
		FavoriteColumn = postgres.BoolColumn("favorite")
		CommentsColumn = postgres.StringColumn("comments")
		RatingColumn   = postgres.IntegerColumn("rating")
		allColumns     = postgres.ColumnList{IDColumn, MovieIDColumn, UserIDColumn, StatusColumn, FavoriteColumn, CommentsColumn, RatingColumn}
		mutableColumns = postgres.ColumnList{MovieIDColumn, UserIDColumn, StatusColumn, FavoriteColumn, CommentsColumn, RatingColumn}
	)

	return watchlistTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		MovieID:  MovieIDColumn,
		UserID:   UserIDColumn,
		Status:   StatusColumn,
		Favorite: FavoriteColumn,
		Comments: CommentsColumn,
		Rating:   RatingColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
